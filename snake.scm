#!/usr/bin/env mics.py

(macro inc! (v) `(set! ,v (+ ,v 1)))
(macro dec! (v) `(set! ,v (- ,v 1)))

(define sp "  ")
(define sq (list->string '(0x2588 0x2588)))
(define scr (nc-initscr))
(define@ grid-height grid-width
         (let ((yx (nc-getmaxyx scr)))
           (list (- (list-ref yx 0) 1)
             (/ (- (list-ref yx 1) 2) 2))))
(define (grid-set-str y x s) (nc-addstr scr y (* x 2) s))
(define (grid-unset y x) (grid-set-str y x sp))
(define (grid-set y x) (grid-set-str y x sq))
(let loop ((x (- grid-width 1)))
  (when (>= x 1)
    (grid-set 0 x)
    (grid-set grid-height x)
    (loop (- x 1))))
(let loop ((y (- grid-height 1)))
  (when (>= y 1)
    (grid-set y 0)
    (grid-set y grid-width)
    (loop (- y 1))))

(define (make-game maxy maxx)
  (let ((y 8) (x 8))
    (define body-length 19)
    (define butt (list (+ y) (+ x)))
    (define body (let loop ((b '()) (i body-length))
                   (if (zero? i) b
                     (loop (cons (nonlist (car butt) (cadr butt))
                                 b) (- i 1)))))
    (define (get-butt) butt)
    (define dir 'right) (inc! x)
    (define (get-head) (list y x))
    (define (set-dir! v) (set! dir v))
    (define (step!)
      (set! body (cons (nonlist (+ y) (+ x)) body))
      (define d (list-tail body (- body-length 1)))
      (set! butt (list (caar d) (cdar d)))
      (set-cdr! d '())
      (case dir
        (('up) (dec! y))
        (('down) (inc! y))
        (('left) (dec! x))
        (('right) (inc! x))
        (else => error))
      )
    (define (is-over)
      (or (>= y maxy) (<= y 0)
            (>= x maxx) (<= x 0) (member (nonlist y x) body)))
    (class get-head get-butt set-dir! step! is-over)))

(define keys (alist->dict
               '((#\a . up)
                 (#\z . down)
                 (#\o . left)
                 (#\p . right))))

(define game (make-game grid-height grid-width))
(let loop ((t (current-jiffy)))
    (define ch (nc-getch scr))
    (if (or (eq? ch #\q) (game 'is-over))
      (begin (nc-endwin) (exit 0))
      (begin
        (dict-if-get keys ch 'ign
                     (lambda (d)
                       (game 'set-dir! d)))
        (game 'step!)
        (apply grid-set (game 'get-head))
        (apply grid-unset (game 'get-butt))
        (define nt (current-jiffy))
        (pause (- 300 (- nt t)))
        (loop nt))))

